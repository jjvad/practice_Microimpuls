from mmpy_bot import Plugin, listen_to
import matplotlib.pyplot as plt
from config import BOT_TOKEN
from second_task import get_names, get_views_list
from io import StringIO, BytesIO
from .interval_plugin import Interval
from pathlib import Path
import pandas as pd
import csv, os, re, requests

class SetPlugin(Plugin):

    @listen_to("^!–ø–æ–¥–±–æ—Ä–∫–∞$")
    def standart_command(self, message):
        message.is_processed = True
        self.show_help(message)
        return True

    @listen_to(r"^!–ø–æ–¥–±–æ—Ä–∫–∞ (?P<settype>\S+)(?:\s+(?P<count>\S+))?(?:\s+(?P<file>\S+))?$")
    def out_set(self, message, settype, count = '30', file = 0):
        if count == None:
            count = '30'
        if file == None or file == '0':
            file = 0
        message.is_processed = True
        interval = Interval().time_to_query
        if settype == '—Ä–µ–π—Ç–∏–Ω–≥':
            try:
                if int(count) >= 10:
                    data = get_views_list(date1 = interval[0], date2 = interval[1], count=int(count))
                    data = get_names(data)
                    if not file:
                        img_buffer = self.generate_table_image(data)

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ API
                        self._upload_file(
                            channel_id=message.channel_id,
                            content=img_buffer.getvalue(),  # –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            filename=f"top_{count}_ratings.png"
                        )
                        '''table_rows = [f"| {item[0]} | {item[1]} |" for item in data]
                        table = "\n".join(table_rows)

                        self.driver.create_post(
                            channel_id=message.channel_id,
                            message=f"üìä **–¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–∞:**\n```\n{table}\n```"
                        )'''
                    else:
                        csv_buffer = StringIO()
                        writer = csv.writer(csv_buffer)
                        writer.writerow(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–û—Ü–µ–Ω–∫–∞", "ID1", "ID2"])
                        writer.writerows(data)

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ API
                        self._upload_file(
                            channel_id=message.channel_id,
                            content=csv_buffer.getvalue(),
                            filename=f"top_{count}_ratings.csv"
                        )
                else:
                    self.driver.create_post(
                        channel_id=message.channel_id,
                        message=f"–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ 10"
                    )
                    self.show_help(message)
            except Exception as e:
                print(e)
                self.driver.create_post(
                    channel_id=message.channel_id,
                    message=f"–¢—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä(—Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º >= 10."
                )
                self.show_help(message)
        else:
            self.show_help(message)
        return True

    def show_help(self, message):
        filters = {
            "!–ø–æ–¥–±–æ—Ä–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥ (—á–∏—Å–ª–æ>=10) (0/1)": "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É(–í —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã. "
                                                   "–†–∞–∑–º–µ—Ä –∏—Ç–æ–≥–æ–≤–æ–π –ø–æ–¥–±–æ—Ä–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ. –ü–æ—Å–ª–µ–¥–Ω–∏–π "
                                                   "–∞—Ä–≥—É–º–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É csv —Ñ–∞–π–ª–∞"
        }
        help_text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –º–æ–≥—É –≤—ã–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–¥–±–æ—Ä–∫–∏:\n" + \
                    "".join(f"‚Ä¢ `{cmd}` - {desc}" for cmd, desc in filters.items())
        self.driver.reply_to(message, help_text)

    def _upload_file(self, channel_id, content, filename):
        """–ö–∞—Å—Ç–æ–º–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ Mattermost API"""
        headers = {
            'Authorization': f'Bearer {BOT_TOKEN}'
        }

        files = {
            'files': (filename, content),
            'channel_id': (None, channel_id)
        }

        response = requests.post(
            f"https://chat.mpls.im/api/v4/files",
            headers=headers,
            files=files,
            verify=True
        )

        if response.status_code == 201:
            file_id = response.json()['file_infos'][0]['id']
            self.post(channel_id, file_id)
        else:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}", response.text)


    def post(self, channel_id, file_id):
        url = "https://chat.mpls.im/api/v4/posts"

        querystring = {"set_online": "true"}

        payload = "{\"channel_id\": \"" + channel_id + "\",\n  \"message\": \"–í–∞—à —Ñ–∞–π–ª:\",\n  \"file_ids\": [\n    \"" + file_id +"\"\n  ]\n  }\n}"
        headers = {
            "Content-Type": "application/json",
            "Accept": "application/json",
            "Authorization": f"Bearer {BOT_TOKEN}"
        }

        response = requests.post(url, data=payload, headers=headers, params=querystring)

    def generate_table_image(self, data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ –±—É—Ñ–µ—Ä"""
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É
        fig, ax = plt.subplots(figsize=(10, len(data) * 0.3))
        ax.axis('off')

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        table = ax.table(
            cellText=[[item[0], item[1]] for item in data],
            colLabels=["–ù–∞–∑–≤–∞–Ω–∏–µ", "–û—Ü–µ–Ω–∫–∞"],
            cellLoc='center',
            loc='center'
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        table.auto_set_font_size(False)
        table.set_fontsize(15)
        table.scale(1.2, 1.8)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        img_buffer = BytesIO()
        plt.savefig(img_buffer, format='png', bbox_inches='tight', dpi=300)
        img_buffer.seek(0)
        plt.close()

        return img_buffer